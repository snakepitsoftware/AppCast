#!/usr/bin/env zsh

# zsh is required because the version of bash included with macOS is too old to support associative arrays
# An associative array is used to hold the contents of the .ini file that stores the configurable items

set -euo pipefail

: ${DEBUG:=false}

SCRIPTNAME=${0}
[ ${DEBUG} = true ] && echo "\$SCRIPTNAME -> ${SCRIPTNAME}"
SCRIPTPATH=${0:A:h}     # Absolute path resolving symlinks and removing command
[ ${DEBUG} = true ] && echo "\$SCRIPTPATH -> ${SCRIPTPATH}"

[ ${DEBUG} = true ] && echo

usage () {
  echo "Usage: ${SCRIPTNAME} <path_to_app>"
  exit 1
}

[ $# -ne 1 ] && { usage; }

. "${SCRIPTPATH}/lib_appcast"
. "${SCRIPTPATH}/lib_appcast_ini"

if [[ ${INI[AppCast_<server>_release_site_url]} =~ github.com ]]; then
  echo "Archive creation isn't necessary. It's handled on GitHub."
  exit 4
else
  ARCHIVE_FILENAME="${DISPLAYNAME}-v${SHORTVERSIONSTRING}+${VERSION}.zip"
fi
[ ${DEBUG} = true ] && echo "\$ARCHIVE_FILENAME -> ${ARCHIVE_FILENAME}"

# This algorithm needs to be the same as in appcast.php. It needs to match the
# directory structure on the server
SECRET=$(echo -n "${DISPLAYNAME}${KEY}" | openssl dgst -md5);
[ ${DEBUG} = true ] && echo "\$SECRET -> ${SECRET}"

if [[ ! ${INI[AppCast_<server>_release_site_url]} =~ github.com ]]; then
  RELEASE_BASEURL="${RELEASE_BASEURL}${DISPLAYNAME}_${SECRET}/"
fi
[ ${DEBUG} = true ] && echo "\$RELEASE_BASEURL -> ${RELEASE_BASEURL}"

# Create the archive
[ -f "${ARCHIVE_FILENAME}" ] && { rm "${ARCHIVE_FILENAME}"; }
[ ${DEBUG} = true ] && echo
create_archive "${ARCHIVE_FILENAME}" "${APPPATH}" "${APPNAME}"

if [[ ! ${INI[AppCast_<server>_release_site_url]} =~ github.com ]]; then
  echo
  echo "The archive (${ARCHIVE_FILENAME}) needs to get copied to \"${RELEASE_BASEURL}\"."
fi

# vim: set filetype=zsh:
# vim: set shiftwidth=2 tabstop=2:
